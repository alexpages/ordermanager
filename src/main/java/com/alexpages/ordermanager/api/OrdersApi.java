/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.alexpages.ordermanager.api;

import com.alexpages.ordermanager.api.domain.GetOrderAuditRequest;
import com.alexpages.ordermanager.api.domain.OrderDetails;
import com.alexpages.ordermanager.api.domain.OrderInputData;
import com.alexpages.ordermanager.api.domain.OrderOutputAudit;
import com.alexpages.ordermanager.api.domain.OrderOutputData;
import com.alexpages.ordermanager.api.domain.OrderPatchInput;
import com.alexpages.ordermanager.api.domain.OrderPatchResponse;
import com.alexpages.ordermanager.api.domain.OrderPostRequest;
import com.alexpages.ordermanager.api.domain.OrderPostResponse;
import com.alexpages.ordermanager.api.domain.PostOrder403Response;
import com.alexpages.ordermanager.api.domain.PostOrder404Response;
import com.alexpages.ordermanager.api.domain.PostOrder500Response;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.Optional;
import jakarta.annotation.Generated;

@Validated
public interface OrdersApi {

    @Operation(operationId = "deleterOrderById", summary = "Allows you to delete a order", description = "Service that allows you to delete a order.",    tags = { "orders" },  responses = {  @ApiResponse(responseCode = "204", description = "No Content"),  @ApiResponse(responseCode = "404", description = "Resource not found.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder404Response.class))  }),  @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder500Response.class))  })  })
    @RequestMapping( method = RequestMethod.DELETE, value = "/orders/{orderId}", produces = { "application/json" })      
    ResponseEntity<Void> deleterOrderById( @Parameter(name = "orderId", description = "Identifier of a user id value", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId);

    @Operation(operationId = "getOrderAudit", summary = "Allows you to audit orders", description = "Service that allows you to audit orders, retrieving information about employees, customers, items, etc. The results will be paginated.",    tags = { "orders" },  responses = {  @ApiResponse(responseCode = "200", description = "OK", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = OrderOutputAudit.class))  }),  @ApiResponse(responseCode = "204", description = "No Content"),  @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder500Response.class))  })  })
    @RequestMapping( method = RequestMethod.POST, value = "/orders/audit/request", produces = { "application/json" }, consumes = { "application/json" })      
    ResponseEntity<OrderOutputAudit> getOrderAudit( @Parameter(name = "GetOrderAuditRequest", description = "", required = true) @Valid @RequestBody GetOrderAuditRequest getOrderAuditRequest);

    @Operation(operationId = "getOrderById", summary = "Allows you to get the details of an order", description = "Service that allows you to recover all the information related to a order (employee, customer, items, etc.)",    tags = { "orders" },  responses = {  @ApiResponse(responseCode = "200", description = "OK", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = OrderDetails.class))  }),  @ApiResponse(responseCode = "404", description = "Resource not found.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder404Response.class))  }),  @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder500Response.class))  })  })
    @RequestMapping( method = RequestMethod.GET, value = "/orders/{orderId}", produces = { "application/json" })      
    ResponseEntity<OrderDetails> getOrderById( @Parameter(name = "orderId", description = "Identifier of a user id value", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId);

    @Operation(operationId = "getOrders", summary = "Allows you to request a list of orders", description = "Service that allows you to recover all the information related to a order (employee, customer, items, etc.). The result will be paginated from BD",    tags = { "orders" },  responses = {  @ApiResponse(responseCode = "200", description = "OK", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = OrderOutputData.class))  }),  @ApiResponse(responseCode = "204", description = "No Content"),  @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder500Response.class))  })  })
    @RequestMapping( method = RequestMethod.POST, value = "/orders/request", produces = { "application/json" }, consumes = { "application/json" })      
    ResponseEntity<OrderOutputData> getOrders( @Parameter(name = "OrderInputData", description = "Request body orders", required = true) @Valid @RequestBody OrderInputData orderInputData);

    @Operation(operationId = "postOrder", summary = "Allows you to post an order", description = "Service that allows you to register an order. The order will have related information about customers, employees and items",    tags = { "orders" },  responses = {  @ApiResponse(responseCode = "201", description = "Created", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = OrderPostResponse.class))  }),  @ApiResponse(responseCode = "403", description = "Unauthorized request. The user is not authorized or JWT was expired.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder403Response.class))  }),  @ApiResponse(responseCode = "404", description = "Resource not found.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder404Response.class))  }),  @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder500Response.class))  })  })
    @RequestMapping( method = RequestMethod.POST, value = "/orders", produces = { "application/json" }, consumes = { "application/json" })      
    ResponseEntity<OrderPostResponse> postOrder( @Parameter(name = "OrderPostRequest", description = "Request body orders", required = true) @Valid @RequestBody OrderPostRequest orderPostRequest);

    @Operation(operationId = "takeOrderById", summary = "Allows you to change status of an order", description = "Service that allows you to change the status of an order.",    tags = { "orders" },  responses = {  @ApiResponse(responseCode = "200", description = "OK", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = OrderPatchResponse.class))  }),  @ApiResponse(responseCode = "404", description = "Resource not found.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder404Response.class))  }),  @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder500Response.class))  })  })
    @RequestMapping( method = RequestMethod.PATCH, value = "/orders/{orderId}", produces = { "application/json" }, consumes = { "application/json" })      
    ResponseEntity<OrderPatchResponse> takeOrderById( @Parameter(name = "orderId", description = "Identifier of a user id value", required = true, in = ParameterIn.PATH) @PathVariable("orderId") Long orderId,@Parameter(name = "OrderPatchInput", description = "", required = true) @Valid @RequestBody OrderPatchInput orderPatchInput);
}
