/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.alexpages.ordermanager.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.alexpages.ordermanager.api.domain.AddUser201Response;
import com.alexpages.ordermanager.api.domain.AddUser409Response;
import com.alexpages.ordermanager.api.domain.AuthenticateRequest;
import com.alexpages.ordermanager.api.domain.AuthenticateResponse;
import com.alexpages.ordermanager.api.domain.GetOrderById404Response;
import com.alexpages.ordermanager.api.domain.PostOrder400Response;
import com.alexpages.ordermanager.api.domain.PostOrder403Response;
import com.alexpages.ordermanager.api.domain.PostOrder500Response;
import com.alexpages.ordermanager.api.domain.User;
import com.alexpages.ordermanager.api.domain.UserInputData;
import com.alexpages.ordermanager.api.domain.UserOuputData;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;

@Validated
public interface UsersApi {

    @Operation(operationId = "addUser", summary = "Allows you to create a user", description = "Create a new user profile.",    tags = { "users" },  responses = {  @ApiResponse(responseCode = "201", description = "Client created successfully", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = AddUser201Response.class))  }),  @ApiResponse(responseCode = "400", description = "Bad request. The request body does not follow the expected format.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder400Response.class))  }),  @ApiResponse(responseCode = "409", description = "Resource not found.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = AddUser409Response.class))  })  })
    @RequestMapping( method = RequestMethod.POST, value = "/users", produces = { "application/json" }, consumes = { "application/json" })      
    ResponseEntity<AddUser201Response> addUser( @Parameter(name = "User", description = "") @Valid @RequestBody(required = false) User user);

    @Operation(operationId = "authenticateUser", summary = "Allows you to authenticate a user and receive JWT", description = "This method allows you to retrieve a **JWT** for the user after it has ben authenticated.",    tags = { "users" },  responses = {  @ApiResponse(responseCode = "200", description = "JWT created successfully", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = AuthenticateResponse.class))  }),  @ApiResponse(responseCode = "403", description = "Unauthorized request. The user is not authorized or JWT was expired.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder403Response.class))  }),  @ApiResponse(responseCode = "404", description = "Resource not found.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = GetOrderById404Response.class))  }),  @ApiResponse(responseCode = "500", description = "Internal Server Error.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder500Response.class))  })  })
    @RequestMapping( method = RequestMethod.POST, value = "/users/authenticate", produces = { "application/json" }, consumes = { "application/json" })      
    ResponseEntity<AuthenticateResponse> authenticateUser( @Parameter(name = "AuthenticateRequest", description = "") @Valid @RequestBody(required = false) AuthenticateRequest authenticateRequest);

    @Operation(operationId = "deleteUserById", summary = "Allows you to delete a user", description = "Service that allows you to delete a user.",    tags = { "users" },  responses = {  @ApiResponse(responseCode = "204", description = "No Content"),  @ApiResponse(responseCode = "403", description = "Unauthorized request. The user is not authorized or JWT was expired.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder403Response.class))  }),  @ApiResponse(responseCode = "404", description = "Resource not found.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = GetOrderById404Response.class))  })  })
    @RequestMapping( method = RequestMethod.DELETE, value = "/users/{userId}", produces = { "application/json" })      
    ResponseEntity<Void> deleteUserById( @Parameter(name = "userId", description = "Identifier of a user", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId);

    @Operation(operationId = "getUserById", summary = "Allows you to request user details", description = "Service that allows you to recover all the information related to a user.",    tags = { "users" },  responses = {  @ApiResponse(responseCode = "200", description = "OK", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))  }),  @ApiResponse(responseCode = "400", description = "Bad request. The request body does not follow the expected format.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder400Response.class))  }),  @ApiResponse(responseCode = "404", description = "Resource not found.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = GetOrderById404Response.class))  })  })
    @RequestMapping( method = RequestMethod.GET, value = "/users/{userId}", produces = { "application/json" })      
    ResponseEntity<User> getUserById( @Parameter(name = "userId", description = "Identifier of a user", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId);

    @Operation(operationId = "getUsers", summary = "Allows you to request a list of users", description = "Service that allows you to recover all the information related to users according to search criteria. The result will be paginated. from BD",    tags = { "users" },  responses = {  @ApiResponse(responseCode = "200", description = "OK", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = UserOuputData.class))  }),  @ApiResponse(responseCode = "204", description = "No Content"),  @ApiResponse(responseCode = "400", description = "Bad request. The request body does not follow the expected format.", content = {  @Content(mediaType = "application/json", schema = @Schema(implementation = PostOrder400Response.class))  })  })
    @RequestMapping( method = RequestMethod.POST, value = "/users/request", produces = { "application/json" }, consumes = { "application/json" })      
    ResponseEntity<UserOuputData> getUsers( @Parameter(name = "UserInputData", description = "Filter criteria for user search", required = true) @Valid @RequestBody UserInputData userInputData);
}
