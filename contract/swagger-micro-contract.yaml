openapi: 3.0.3
info:
  description: >-
    **Ordermanager** is an API that manages CRUD operations for orders, auditing the modifications made to them. It also facilitates user registration and authentication for accessing the endpoints. This microservice provides a total of 11 endpoints across two interfaces, each implemented by a separate controller within the same microservice. The user interface is integrated with Spring Security, while the order interface is linked to Spring Boot and handles communication with the database / **Ordermanager** es una API que gestiona las operaciones CRUD de órdenes, auditando las modificaciones que se realizan en estas, y también permite el registro y autenticación de los usuarios que harán uso de los endpoints mencionados. Este microservicio habilita un total de 11 endpoints en dos interfaces que serán implementadas en dos controladores distintos en el mismo microservicio. La parte de usuarios está relacionada con Spring Security mientras que la parte de órdenes está vinculada a Spring Boot y la comunicación con la base de datos.
  version: 1.0.0
  title: ordermanager
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Alex Pages Andreu
    email: apagesan@uoc.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:3000'
tags:
  - name: orders
    description: Services related to orders
  - name: users
    description: Services related to users
paths:

  /orders:
    post:
      tags:
        - orders
      summary: Allows you to post an order
      operationId: postOrder
      description: >-
        Service that allows you to register an order. The order will have
        related information about customers, employees and items
      requestBody:
        $ref: '#/components/requestBodies/OrderPostRequest'
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPostResponse'
        '403':
          $ref: '#/components/responses/403'  
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /orders/request:
    post:
      tags:
        - orders
      summary: Allows you to request a list of orders
      operationId: getOrders
      description: >-
        Service that allows you to recover all the information related to a
        order (employee, customer, items, etc.). The result will be paginated
        from BD
      requestBody:
        $ref: '#/components/requestBodies/OrderInputData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderOutputData'
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  
  /orders/audit/request:
    post:
      tags:
        - orders
      summary: Allows you to audit orders
      operationId: getOrderAudit
      description: >-
        Service that allows you to audit orders, retrieving information about employees, customers, items, etc. The results will be paginated.
      requestBody:
        $ref: '#/components/requestBodies/OrderInputAudit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderOutputAudit'
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
          
  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Allows you to get the details of an order
      operationId: getOrderById
      description: >-
        Service that allows you to recover all the information related to a
        order (employee, customer, items, etc.)
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - orders
      summary: Allows you to change status of an order
      operationId: takeOrderById
      description: >-
        Service that allows you to change the status of an order.
      parameters:
        - $ref: '#/components/parameters/OrderId'
      requestBody:
        $ref: '#/components/requestBodies/OrderPatchInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPatchResponse'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
    delete:
      tags:
        - orders
      summary: Allows you to delete a order
      operationId: deleterOrderById
      description: >-
        Service that allows you to delete a order.
      parameters:
        - $ref: '#/components/parameters/OrderId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/403'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'

  /users:
    post:
      tags:
        - users
      summary: Allows you to create a user
      description: Create a new user profile.
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    description: User identifier
                    type: string
                    example: 1
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'

  /users/request:
    post:
      tags:
        - users
      summary: Allows you to request a list of users
      operationId: getUsers
      description: >-
        Service that allows you to recover all the information related to users according to search criteria. The result will be paginated.
        from BD
      requestBody:
        $ref: '#/components/requestBodies/UserInputData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOuputData'
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/400'    
        '500':
          $ref: '#/components/responses/400'      

  /users/{userId}:
    get:
      tags:
        - users
      summary: Allows you to request user details
      operationId: getUserById
      description: Service that allows you to recover all the information related to a user.
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - users
      summary: Allows you to delete a user
      operationId: deleteUserById
      description: >-
        Service that allows you to delete a user.
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/403'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
          
  /users/authenticate:
    post:
      tags:
        - users
      summary: Allows you to authenticate a user and receive JWT
      description: This method allows you to retrieve a **JWT** for the user after it has ben authenticated.
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateRequest'
      responses:
        '200':
          description: JWT created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateResponse'
        '400':
          $ref: '#/components/responses/403'             
        '403':
          $ref: '#/components/responses/403'        
        '404':
          $ref: '#/components/responses/404'

components:
  
  parameters:
    UserId:
      in: path
      name: userId
      description: Identifier of a user 
      required: true
      schema:
        type: integer
        format: int64
        example: 1
    OrderId:
      in: path
      name: orderId
      description: Identifier of an order
      required: true
      schema:
        type: integer
        format: int64
        example: 1
  
  requestBodies:
    OrderInputAudit:
      required: true
      content:
        application/json:
          schema:
            properties:
              orderInputAudit:
                $ref: '#/components/schemas/OrderInputAudit'
              paginationBody:
                $ref: '#/components/schemas/PaginationBody'
    OrderInputData:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderInputData'
      description: Request body orders
    OrderPatchInput:
      required: true
      content:
        application/json:
          schema:
            title: OrderPatchInput
            properties:
              status:
                $ref: '#/components/schemas/Status'
    UserInputAudit:
      required: true
      content:
        application/json:
          schema:
            title: UserInputAudit
            properties:
              userInputAudit:
                $ref: '#/components/schemas/UserInputAudit'
              paginationBody:
                $ref: '#/components/schemas/PaginationBody'
    UserInputData:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserInputData'
      description: Filter criteria for user search
    OrderPostRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderPostRequest'
      description: Request body orders
  schemas:
    AuthenticateRequest:
      description: Request body for client authentication
      type: object
      properties:
        username:
          description: Username value of the user
          type: string  
          example: username123 
        password:
          description: Password value of the user
          type: string   
          example: password123  
      required:
        - username
        - password    
    AuthenticateResponse:
      description: Response body from authentication
      type: object
      properties:  
        jwt:
          description: User temporary JWT
          type: string
          example: jwt0000001
    UserInputAudit:
      type: object
      properties:
        username:
          type: string
          description: Username value of the user
          example: Alex
        userId:
          type: integer
          description: User identifier
          example: 1
        role:
          $ref: '#/components/schemas/Role'  
        actionDate:
          type: string
          format: date
          description: Date of the action
          example: '2023-12-01'
        action:
          $ref: '#/components/schemas/Action'
    UserInputData:
      type: object
      description: Search criteria to obtain users information
      properties:
        inputSearch:
          type: object
          properties:
            username:
              type: string
              description: Username value of the user
              example: Alex
            userId:
              type: integer
              format: int64
              description: user identifier
              example: 1
            role:
              $ref: '#/components/schemas/Role'  
            creationDate:
              type: string
              format: date
              example: "2024-03-16"
              description: Date of creation of the order
        paginationBody:
          $ref: '#/components/schemas/PaginationBody'    
    UserOuputData:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
    User:
      description: User that will post or take orders
      type: object
      properties:
        username:
          description: Username value of the user
          type: string
          example: Alex
        id:
          description: User identifier
          type: integer
          format: int64
          example: 1
        password:
          description: Password of the account
          type: string
          example: encryptedPassword
        role:
          $ref: '#/components/schemas/Role'  
    OrderInputAudit:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
          example: 1
          description: Identifier of the order to which the action was performed
        startDate:
          type: string
          format: date
          description: Start date for the audit period
        endDate:
          type: string
          format: date
          description: End date for the audit period
        actionDate:
          type: string
          format: date
          description: Date of the action
        action:
          $ref: '#/components/schemas/Action'  
    OrderOutputAudit:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderAudit'
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
    Role:
      type: string
      description: Role assigned to the user
      enum:
        - USER
        - ADMIN
      example: ADMIN
    Action:
      type: string
      enum:
        - CREATE
        - UPDATE
        - DELETE
      description: Action performed on the order
      example: CREATE
    OrderInputData:
      type: object
      description: PostOrdersBodyRequest with params to filter
      title: OrderInputData
      properties:
        inputSearch:
          type: object
          properties:
            orderId:
              type: integer
              format: int64
              example: 1
              description: Order request identifier
            status:
              $ref: '#/components/schemas/Status'
            startCreationDate:
              type: string
              example: "2023-01-01"
              format: date
              description: Start date to be considered when filtering orders
            endCreationDate:
              type: string
              format: date
              example: "2024-04-20"
              description: End date to be considered when filtering orders
        paginationBody:
          $ref: '#/components/schemas/PaginationBody'    
    OrderAudit:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          description: Unique identifier for the order audit
        orderId:
          type: integer
          format: int64
          example: 14
          description: Unique identifier for the order that has had any action performed
        actionDate:
          type: string
          format: date
          example: "2024-04-20"
          description: Date when the action was performed
        username:
          type: string
          example: "user1"
          description: User who performed the action
        action:
          $ref: '#/components/schemas/Action'
    OrderOutputData:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderDetails'
        pageResponse:
          $ref: '#/components/schemas/PageResponse'
    OrderDetails:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the order
        description:
          type: string
          example: "Pickup for Carlos"
          description: Description of the order
        time:
          type: string
          example: '17 mins'
          description: Time in minutes and human readable format 
        distance:
         $ref: '#/components/schemas/Distance'
        status:
          $ref: '#/components/schemas/Status'
        origin:
          type: string
          example: 'Carrer Rubió i Ors, 2, 08750 Molins de Rei, Barcelona, Spain'
          description: Origin address in human readable format
        destination:
          type: string
          example: 'Av. de Joan XXIII, 1B, Les Corts, 08028 Barcelona, Spain'
          description: Destination address in human readable format   
        creationDate:
          type: string
          format: date
          example: "2024-04-20"
          description: Date of creation of the order
        version:
          type: integer
          format: int64
          description: Version of the order
          example: 1
    OrderPostRequest:
      required:
        - coordinates
        - description
      type: object
      description: PosOrderBodyRequest with buy to articles
      properties:
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        description:
          type: string
          example: "Pickup for Carlos"
          description: description of the order
    OrderPostResponse:
      type: object
      properties:
        origin:
          type: string
          example: 'Carrer Rubió i Ors, 2, 08750 Molins de Rei, Barcelona, Spain'
          description: Origin address in human readable format
        destination:
          type: string
          example: 'Av. de Joan XXIII, 1B, Les Corts, 08028 Barcelona, Spain'
          description: Destination address in human readable format   
        time:
          type: string
          example: '17 mins'
          description: Time in minutes and human readable format 
        distance:
         $ref: '#/components/schemas/Distance'
        status:
          $ref: '#/components/schemas/Status'
        orderId:
          type: integer
          format: int64
          example: 1
          description: id of order creation    
    Distance:
      type: integer
      example: 12746
      description: distance between origin and destination coordinates
    OrderPatchResponse:
      type: object
      properties:
        status:
          type: string
          example: 'SUCCESS'
          description: result of the patch action
    PaginationBody:
      description: Pagination fields for request body
      type: object
      properties:
        page:
          description: Page key
          type: number
          minimum: 1
          example: 1
        size:
          description: Page size
          type: number
          minimum: 1
          example: 10
    PageResponse:
      type: object
      properties:
        totalPages:
          type: integer
          description: Number of existing pages 
        totalElements:
          type: integer
          format: int64
          description: Number of existing registers
        size:
          type: integer
          description: Number of registers per page
        number:
          type: integer
          description: Number of registers in the first page
        numberOfElements:
          type: integer
          description: Number of registers in the returned page
        last:
          type: boolean
          description: true if it is last page
        first:
          type: boolean
          description: true if it is first page
        empty:
          type: boolean
          description: true if the returned page does not contain registers
        sort:
          $ref: '#/components/schemas/Sort'
      required:
        - totalPages
        - totalElements
        - size
        - number
        - numberOfElements
        - last
        - first
        - empty
        - sort
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
          description: true if sorting has been requested for some field
        unsorted:
          type: boolean
          description: true if no sorting has been requested for any field
        empty:
          type: boolean
          description: true if the returned page contains no records, and this field does not apply
      required:
        - sorted
        - unsorted
        - empty
    Status:
      description: Status of the order
      type: string
      enum:
        - UNASSIGNED
        - TAKEN
        - COMPLETED
    Coordinates:
      description: Coordinates of the order
      type: object
      properties:
        origin:
          type: array
          items:
            type: string
            pattern: '^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$'
          description: Array containing [latitude, longitude] for origin
          example: ["41.412061", "2.016507"]
        destination:
          type: array
          items:
            type: string
            pattern: '^[-+]?([1-8]?\d(\.\d+)?|90(\.0+)?),\s*[-+]?(180(\.0+)?|((1[0-7]\d)|([1-9]?\d))(\.\d+)?)$'
          description: Array containing [latitude, longitude] for destination
          example: ["41.381115", "2.119482"]    
  responses:
    '204':
      description: No Content
    '400':
      description: Bad request. The request body does not follow the expected format.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "The payload is not correct"
    '403':
      description: Unauthorized request. The user is not authorized or JWT was expired.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized request"
    '404':
      description: Resource not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Resource not found"
    '409':
      description: Conflict.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "There was a conflict when executing the endpoint"    
    '500':
      description: Internal Server Error.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Internal Server Error"
                